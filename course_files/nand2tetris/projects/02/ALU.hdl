// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16], // 16-bit inputs
        zx, // zero the x input
        nx, // negate the x input
        zy, // zero the y input
        ny, // negate the y input
        f,  // compute out = x + y (if 1) else x & y (if 0)
        no; // negate the out output

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // | z* | n* | out | operation | name  |
    // | -- | -- | --- | --------- | ----- |
    // | 0  | 0  | a   | *=*       | *     |
    // | 0  | 1  | b   | ~*        | *Not  |
    // | 1  | 0  | c   | *=0       | false |
    // | 1  | 1  | d   | *=~0      | true  |

        Not16 (in=x, out=xNot);
        Mux4Way16 (a=x, b=xNot, c=false, d=true, sel[1]=zx, sel[0]=nx, out=xOut);
        Not16 (in=y, out=yNot);
        Mux4Way16 (a=y, b=yNot, c=false, d=true, sel[1]=zy, sel[0]=ny, out=yOut);

    // | f | no | out | operation | name         |
    // | - | -- | --- | --------- | ------------ |
    // | 0 | 0  | a   | x&y       | fAnd16Out    |
    // | 0 | 1  | b   | ~x&y      | NotfAnd16Out |
    // | 1 | 0  | c   | x+y       | fAdd16Out    |
    // | 1 | 1  | d   | ~x+y      | NotfAdd16Out |

        And16 (a=xOut, b=yOut, out=fAnd16Out);
        Add16 (a=xOut, b=yOut, out=fAdd16Out);
        Not16 (in=fAnd16Out, out=noAnd16Out);
        Not16 (in=fAdd16Out, out=noAdd16Out);
        Mux4Way16 (a=fAnd16Out, b=noAnd16Out, c=fAdd16Out, d=noAdd16Out, sel[1]=f, sel[0]=no, out=fnoOut);
        Mux16 (a=fnoOut, b=false, sel=false, out=out);

    // zr - invert fnoOut to get a 1=true condition upon fnoOut=0, then And16
        Not (in=fnoOut[0], out=NotfnoOut);
        And (a=NotfnoOut, b=true, out=zr);

    // ng - Add16(x,y) needs to be compared against fnoOut I think, but how?
    //      or... just check for this --> ~((x) + (~y)) - being true???


}
